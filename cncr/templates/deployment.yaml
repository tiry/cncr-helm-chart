{{- $credentials := ternary "" (printf "%s%s" .Values.mongodb.credentials "@") (empty .Values.mongodb.credentials) -}}
{{- range splitList "," (include "nuxeo.nodeTypes" .) }}
{{- $nuxeoNodeType := . -}}
{{- $nuxeoFullnameSuffix := ternary "" (printf "-%s" $nuxeoNodeType) (eq $nuxeoNodeType "single") -}}
{{- $workerNode := (eq $nuxeoNodeType "worker") -}}
{{- with $ }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "nuxeo.fullname" . }}{{ $nuxeoFullnameSuffix }}
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
  annotations:
    keel.sh/policy: force
    keel.sh/pollSchedule: '@every 1m'
    keel.sh/trigger: poll
spec:
  selector:
    matchLabels:
      app: {{ template "nuxeo.fullname" . }}
      nuxeoNode: {{ $nuxeoNodeType }}
  replicas: {{ ternary (default 1 .Values.workerCount) .Values.replicaCount $workerNode }}
  template:
    metadata:
      labels:
        app: {{ template "nuxeo.fullname" . }}
        nuxeoNode: {{ $nuxeoNodeType }}
        tier: {{ ternary "backend" "frontend" $workerNode }}
{{- with .Values.podLabels }}
{{ toYaml . | indent 8 }}
{{- end }}
      annotations:
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        rollme: {{ ternary (randAlphaNum 5 | quote) "unchanged" (eq "true" (include "nuxeo.deployment.roll" .)) }}
{{- with .Values.podAnnotations }}
{{ toYaml . | indent 8 }}
{{- end }}
    spec:
      {{- with .Values.image.pullSecrets }}
      imagePullSecrets: {{ toYaml . | nindent 6}}
      {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        resources:
          requests:
            memory: "{{ .Values.resources.requests.memory }}"
            cpu: "{{ .Values.resources.requests.cpu }}"
          limits:
            memory: "{{ .Values.resources.limits.memory }}"
            cpu: "{{ .Values.resources.limits.cpu }}"
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
{{- if .Values.image.pullPolicy }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
{{- end }}
        ports:
        - containerPort: {{ .Values.service.internalPort }}
          name: tomcat
        {{- with .Values.extraContainerPorts -}}
        {{ toYaml . | nindent 8 }}
        {{- end }}
        livenessProbe:
          httpGet:
            path: /q/health/live
            port: {{ .Values.service.internalPort }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        readinessProbe:
          httpGet:
            path: /q/health
            port: {{ .Values.service.internalPort }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
        env:
{{- if .Values.amazonS3.enabled }}
        - name: AWS_ACCESS_KEY_ID
          value: {{ .Values.amazonS3.accessKeyId }}
        - name: AWS_SECRET_KEY
          value: {{ .Values.amazonS3.secretKey }}
{{- end }}
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_UID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
{{- if .Values.customEnvs }}
{{ toYaml .Values.customEnvs | indent 8 }}
{{- end }}
        envFrom:
{{- if .Values.customEnvsFrom }}
{{ toYaml .Values.customEnvsFrom | indent 8 }}
{{- end }}
        volumeMounts:
          - name: quarkusconf
            mountPath: /deployments/nuxeo/config/application.properties
            subPath: application.properties
            readOnly: false
          {{- range $key, $val := .Values.customProperties }}
          {{- with $ }}
          - name: nuxeoconf-{{ $key }}
            mountPath: /etc/nuxeo/conf.d/nuxeo-{{ $key }}.conf
            subPath: nuxeo-{{ $key }}.conf
          {{- end }}
          {{- end }}
          - name: log
            mountPath: /var/log/nuxeo
          {{- if not (include "nuxeo.cloudProvider.enabled" .) }}
          - name: binaries
            mountPath: /var/lib/nuxeo/binaries
          {{- end }}
          {{- with .Values.extraVolumeMounts }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
      {{- with .Values.extraContainers }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
      initContainers:
{{- if and .Values.mongodb.enabled .Values.mongodb.host }}
      - name: init-mongodb
        image: busybox
        command: ['sh', '-c', 'until nc -w1 {{ .Values.mongodb.host }} {{ .Values.mongodb.port }}; do echo "waiting for mongodb"; sleep 2; done;']
{{- end }}
{{- if .Values.postgresql.enabled }}
      - name: init-postgresql
        image: busybox
        command: ['sh', '-c', 'until nc -w1 {{ .Values.postgresql.host }} {{ .Values.postgresql.port }}; do echo "waiting for postgresql"; sleep 2; done;']
{{- end }}
{{- if .Values.elasticsearch.enabled }}
      - name: init-elasticsearch
        image: busybox
        command: ['sh', '-c', 'until nc -w1 {{ .Values.elasticsearch.host }} {{ .Values.elasticsearch.port }}; do echo "waiting for elastic"; sleep 2; done;']
{{- end }}
{{- if .Values.kafka.enabled }}
      - name: init-kafka
        image: busybox
        command: ['sh', '-c', 'until nc -w1 {{ .Values.kafka.host }} {{ .Values.kafka.port }}; do echo "waiting for kafka"; sleep 2; done;']
{{- end }}
      securityContext:
        fsGroup: 1000
      volumes:
      - name: quarkusconf
        configMap:
          name: {{ template "nuxeo.fullname" . }}-quarkus-conf{{ $nuxeoFullnameSuffix }}
      {{- range $key, $val := .Values.customProperties }}
      {{- with $ }}
      - name: nuxeoconf-{{ $key }}
        configMap:
          name: {{ template "nuxeo.fullname" . }}-conf-{{ $key }}
      {{- end }}
      {{- end }}
      - name: log
        {{- if .Values.logs.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ template "nuxeo.fullname" . }}-log
        {{- else }}
        emptyDir: {}
        {{- end }}
      {{- if not (include "nuxeo.cloudProvider.enabled" .) }}
      - name: binaries
        {{- if .Values.persistentVolumeStorage.enabled }}
        persistentVolumeClaim:
          claimName: {{ template "nuxeo.fullname" . }}-binaries
        {{- else }}
        emptyDir: {}
        {{- end }}
      {{- end }}
      {{- with .Values.extraVolumes }}
      {{- toYaml . | nindent  6 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
{{- end }}
